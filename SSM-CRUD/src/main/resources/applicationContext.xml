<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context" xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd http://www.springframework.org/schema/aop https://www.springframework.org/schema/aop/spring-aop.xsd">

    <!-- Spring的配置文件，这里主要配置和业务逻辑有关的 -->

    <!-- 开启组件扫描 -->
    <context:component-scan base-package="com.ssm.crud" >
        <!-- 不扫描Controller -->
        <context:exclude-filter type="annotation" expression="org.springframework.stereotype.Controller"/>
    </context:component-scan>


    <!-- =======================配置数据源(jdbc)=========================================-->

    <!-- 读取jdbc.properties文件 -->
    <context:property-placeholder location="classpath:jdbc.properties"/>
    <!-- 引入外部属性文件配置数据库连接池-->
    <bean id="pooledDataSource" class="com.alibaba.druid.pool.DruidDataSource">
        <property name="driverClassName" value="${jdbc.driver}"></property>
        <property name="url" value="${jdbc.url}"></property>
        <property name="username" value="${jdbc.username}"></property>
        <property name="password" value="${jdbc.password}"></property>
    </bean>

    <!-- ==========================配置和MyBatis的整合==================================== -->

    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <!-- 指定mybatis全局配置文件位置 -->
        <property name="configLocation" value="classpath:mybatis-config.xml"></property>
        <!-- 指定数据源(jdbc) -->
        <property name="dataSource" ref="pooledDataSource"></property>
        <!-- 指定mybatis，中mapper映射文件位置 -->
        <property name="mapperLocations" value="classpath:com/ssm/crud/mappers/*.xml"></property>
    </bean>

    <!-- 配置扫描器，将MyBatis 接口的实现加入到IOC容器中 -->
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <!-- 扫描所有mapper(dao)接口的实现，加入到IOC容器 -->
        <property name="basePackage" value="com.ssm.crud.dao"></property>
    </bean>


    <!-- ===========================配置可以执行批量操作的sqlSession================================ -->
    <bean id="sqlSession" class="org.mybatis.spring.SqlSessionTemplate">
        <constructor-arg name="sqlSessionFactory" ref="sqlSessionFactory"></constructor-arg>
        <constructor-arg name="executorType" value="SIMPLE"></constructor-arg>
    </bean>


    <!-- ===========================事务控制的配置================================ -->

    <!-- 创建事务管理器-->
    <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <!-- 注入数据源-->
        <property name="dataSource" ref="pooledDataSource"></property>
    </bean>
    <!-- 使用xml配置形式的事务（必要主要的都是使用配置式） -->
    <!-- 配置通知-->
    <tx:advice id="txAdvice" transaction-manager="transactionManager">
        <!-- 配置事务参数-->
        <tx:attributes>
            <!-- 指定哪种规则的方法上面添加事务-->
            <!-- 所有方法都是事务方法 -->
            <tx:method name="*"></tx:method>
            <!-- 以get开始的所有方法,都是只读的 -->
            <tx:method name="get*" read-only="true"></tx:method>
        </tx:attributes>
    </tx:advice>
    <!-- 配置切入点 和 切面-->
    <aop:config>
        <!-- 配置切入点-->
        <aop:pointcut id="pt" expression="execution(* com.ssm.crud.service..*(..))"/>
        <!-- 配置切面-->
        <aop:advisor advice-ref="txAdvice" pointcut-ref="pt"></aop:advisor>
    </aop:config>

    <!-- Spring配置文件的核心点：组件扫描，数据源，mybatis整合，事务控制 -->
</beans>